// Simple in-memory file storage for 24-hour access
interface StoredFile {
  content: string;
  fileName: string;
  mimeType: string;
  expiresAt: Date;
}

const fileStorage = new Map<string, StoredFile>();

export interface StoredFileInfo {
  downloadUrl: string;
  fileName: string;
  fileType: string;
}

export async function storeFileForDownload(
  jobId: number,
  fileName: string,
  content: string,
  fileType: 'pdf' | 'docx'
): Promise<StoredFileInfo> {
  // Generate unique file ID
  const fileId = `${jobId}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  const downloadUrl = `/api/download/${fileId}`;
  
  // Calculate expiration time (24 hours from now)
  const expiresAt = new Date();
  expiresAt.setHours(expiresAt.getHours() + 24);
  
  // Determine MIME type
  const mimeType = fileType === 'pdf' ? 'application/pdf' : 'application/vnd.openxmlformats-officedocument.wordprocessingml.document';
  
  // Store file in memory
  fileStorage.set(fileId, {
    content,
    fileName,
    mimeType,
    expiresAt,
  });
  
  return {
    downloadUrl,
    fileName,
    fileType,
  };
}

export function getStoredFile(fileId: string): StoredFile | null {
  const file = fileStorage.get(fileId);
  if (!file || file.expiresAt < new Date()) {
    // Clean up expired file
    if (file) fileStorage.delete(fileId);
    return null;
  }
  return file;
}

// Clean up expired files periodically
setInterval(() => {
  const now = new Date();
  const keysToDelete: string[] = [];
  
  fileStorage.forEach((file, fileId) => {
    if (file.expiresAt < now) {
      keysToDelete.push(fileId);
    }
  });
  
  keysToDelete.forEach(fileId => fileStorage.delete(fileId));
}, 60 * 60 * 1000); // Clean up every hour

export async function createDownloadableFile(
  content: string,
  fileName: string,
  format: 'pdf' | 'docx' = 'pdf'
): Promise<string> {
  if (format === 'pdf') {
    // Create a properly formatted resume with professional structure
    const formattedContent = formatResumeContent(content);
    return Buffer.from(formattedContent).toString('base64');
  } else {
    // Create a structured text file with proper resume formatting
    const formattedContent = formatResumeContent(content);
    return Buffer.from(formattedContent).toString('base64');
  }
}

function formatResumeContent(content: string): string {
  // Structure the resume content with proper sections and formatting
  const sections = content.split('\n\n');
  let formattedResume = '';
  
  // Extract key information and structure it properly
  let currentSection = '';
  
  for (const section of sections) {
    const lines = section.split('\n').filter(line => line.trim());
    
    if (lines.length === 0) continue;
    
    const firstLine = lines[0].trim();
    
    // Detect section headers and format them
    if (firstLine.toUpperCase().includes('EDUCATION') || 
        firstLine.toUpperCase().includes('EXPERIENCE') || 
        firstLine.toUpperCase().includes('SKILLS') ||
        firstLine.toUpperCase().includes('SUMMARY') ||
        firstLine.toUpperCase().includes('PROJECTS') ||
        firstLine.includes('PROFESSIONAL') ||
        firstLine.includes('TECHNICAL')) {
      
      formattedResume += `\n\n${firstLine.toUpperCase()}\n`;
      formattedResume += '='.repeat(firstLine.length) + '\n\n';
      
      // Add the rest of the section content
      for (let i = 1; i < lines.length; i++) {
        const line = lines[i].trim();
        if (line) {
          // Format bullet points
          if (line.startsWith('•') || line.startsWith('-') || line.startsWith('*')) {
            formattedResume += `    ${line}\n`;
          } else if (line.includes('|') && (line.includes('Present') || line.includes('20'))) {
            // Format job titles and dates
            formattedResume += `\n${line}\n`;
          } else if (line.length > 50 && !line.includes('@')) {
            // Format job descriptions
            formattedResume += `    ${line}\n`;
          } else {
            formattedResume += `${line}\n`;
          }
        }
      }
    } else {
      // Handle contact information and other content
      for (const line of lines) {
        if (line.trim()) {
          if (line.includes('@') || line.includes('|') || line.match(/\(\d{3}\)/)) {
            // Contact information - center it
            formattedResume += `${line}\n`;
          } else if (line.startsWith('•') || line.startsWith('-') || line.startsWith('*')) {
            formattedResume += `    ${line}\n`;
          } else {
            formattedResume += `${line}\n`;
          }
        }
      }
    }
  }
  
  // Add professional footer
  formattedResume += `\n\n${'='.repeat(80)}\nGenerated by UpMySalary Resume Optimizer\n${new Date().toLocaleDateString()}`;
  
  return formattedResume;
}